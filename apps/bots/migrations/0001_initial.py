# Generated by Django 5.1.4 on 2024-12-13 11:31

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CarBrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Car brand')),
                ('popularity_score', models.FloatField(default=0.0, verbose_name='Popularity score')),
            ],
            options={
                'verbose_name': 'Car brand',
                'verbose_name_plural': 'Car brands',
            },
        ),
        migrations.CreateModel(
            name='TelegramBotConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bot_token', models.CharField(default='token', max_length=250)),
                ('secret_key', models.CharField(default='secret_key', max_length=250)),
                ('webhook_url', models.URLField(default='https://api.telegram.org/', max_length=250)),
                ('admin', models.IntegerField(default=12345678)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('telegram_id', models.BigIntegerField(default=0, unique=True, verbose_name='Telegram id')),
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('total_detections', models.PositiveIntegerField(default=0)),
                ('preferred_language', models.CharField(choices=[('uz', 'uz'), ('ru', 'ru'), ('en', 'en')], default='uz', max_length=20, verbose_name='Preffered language')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_groups', to='auth.group', verbose_name='Groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions', to='auth.permission', verbose_name='User permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='BrandPopularity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date')),
                ('popularity_score', models.FloatField(verbose_name='Popularity score')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='popularity_stats', to='bots.carbrand', verbose_name='Brand popularity')),
            ],
            options={
                'verbose_name': 'Brand Popularity',
                'verbose_name_plural': 'Brand Popularities',
            },
        ),
        migrations.CreateModel(
            name='CarModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('popularity_score', models.FloatField(default=0.0, verbose_name='Car model')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='car_models', to='bots.carbrand')),
            ],
            options={
                'verbose_name': 'Car model',
                'verbose_name_plural': 'Car models',
            },
        ),
        migrations.CreateModel(
            name='Detection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.CharField(blank=True, max_length=50, null=True, verbose_name='Color')),
                ('year_from', models.PositiveIntegerField(blank=True, null=True)),
                ('year_to', models.PositiveIntegerField(blank=True, null=True)),
                ('mileage_from', models.PositiveIntegerField(blank=True, null=True)),
                ('mileage_to', models.PositiveIntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bots.carbrand', verbose_name='Car brand')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bots.carmodel', verbose_name='Model')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detection', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Detection',
                'verbose_name_plural': 'Detections',
            },
        ),
        migrations.CreateModel(
            name='CeleryTaskLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_id', models.CharField(max_length=255, verbose_name='Task id')),
                ('start_time', models.DateTimeField(verbose_name='Start time')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='End time')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('success', 'Success'), ('error', 'Error')], max_length=50, verbose_name='Status')),
                ('results', models.JSONField(default=dict, verbose_name='Results')),
                ('detection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bots.detection', verbose_name='Detection')),
            ],
            options={
                'verbose_name': 'Celery task Log',
                'verbose_name_plural': 'Celery task Logs',
            },
        ),
        migrations.CreateModel(
            name='ScrapedCar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('brand', models.CharField(max_length=100, verbose_name='Brand')),
                ('model', models.CharField(max_length=100, verbose_name='Model')),
                ('year', models.IntegerField(verbose_name='Year')),
                ('color', models.CharField(max_length=50, verbose_name='Color')),
                ('mileage', models.IntegerField()),
                ('transmission', models.CharField(blank=True, max_length=50, null=True, verbose_name='Transmission')),
                ('price', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Price')),
                ('contact_number', models.CharField(blank=True, max_length=15, null=True, verbose_name='Contact number')),
                ('ad_url', models.URLField(verbose_name='Ad url')),
                ('images', models.JSONField(default=list, verbose_name='Images')),
                ('scraped_at', models.DateTimeField(auto_now_add=True, verbose_name='Scraped at')),
                ('detection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to='bots.detection', verbose_name='ScrapedCar')),
            ],
            options={
                'verbose_name': 'Scraped Car',
                'verbose_name_plural': 'Scraped Cars',
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interactions_per_day', models.JSONField(default=dict, verbose_name='Interactions per day')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='activity', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Activity',
                'verbose_name_plural': 'User Activities',
            },
        ),
    ]
